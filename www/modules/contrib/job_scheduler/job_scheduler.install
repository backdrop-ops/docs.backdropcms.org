<?php

/**
 * @file
 * Schema definitions install/update/uninstall hooks.
 */

/*
 * Implementation hook_uninstall().
 */
function job_scheduler_uninstall() {
  db_query("DELETE FROM {variable} WHERE name LIKE :name", array(':name' => 'job_scheduler_class_%'));
  state_del('job_scheduler_rebuild_all');
}

/**
 * Implements hook_schema().
 */
function job_scheduler_schema() {
  $schema = array();
  $schema['job_schedule'] = array(
    'description' => 'Schedule of jobs to be executed.',
    'fields' => array(
      'item_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique item ID.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Name of the schedule.',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Type identifier of the job.',
      ),
      'id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
        'description' => 'Numeric identifier of the job.',
      ),
      'period' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE,
        'description' => 'Time period after which job is to be executed.',
      ),
      'crontab' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Crontab line in *NIX format.',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'The arbitrary data for the item.',
      ),
      'expire' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when job expires.',
      ),
      'last' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE,
        'description' => 'Timestamp when a job was last executed.',
      ),
      'periodic' => array(
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE,
        'description' => 'If true job will be automatically rescheduled.',
      ),
      'next' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE,
        'description' => 'Timestamp when a job is to be executed (next = last + period), used for fast ordering.',
      ),
      'scheduled' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => TRUE,
        'description' => 'Timestamp when a job was scheduled. 0 if a job is currently not scheduled.',
      ),
    ),
    'primary key' => array('item_id'),
    'indexes' => array(
      'name_type_id' => array('name', 'type', 'id'),
      'name_type' => array('name', 'type'),
      'next' => array('next'),
      'scheduled' => array('scheduled'),
    ),
  );
  return $schema;
}


function job_scheduler_update_1000() {
  $config = config('job_scheduler.settings');
  $config->set('job_scheduler_rebuild_all', update_variable_get('job_scheduler_rebuild_all'));
  $config->save();

  // Delete variables.
  update_variable_del('job_scheduler_rebuild_all');
}

/**
 * Use state rather than config for job_scheduler_rebuild_all.
 */
function job_scheduler_update_1001() {
  $config = config('job_scheduler.settings');
  $state = $config->get('job_scheduler_rebuild_all');
  if ($state !== NULL) {
    state_set('job_scheduler_rebuild_all', $state);
  }
  $config->clear('job_scheduler_rebuild_all');
  $config->save();
}
