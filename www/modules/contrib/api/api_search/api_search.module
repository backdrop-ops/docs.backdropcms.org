<?php
/**
 * @file
 * Search integration for the API module.
 */

/**
 * Implements hook_menu().
 */
function api_search_menu() {
  $items = array();

  $items['admin/config/development/api/search'] = array(
    'title' => 'Search configuration',
    'access callback' => 'user_access',
    'access arguments' => array('administer API reference'),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('api_search_admin_form'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  return $items;
}

/**
 * Implements hook_node_view().
 *
 * Sets up API documentation "nodes" so that they can be viewed with
 * node_view(), which hopefully only would be invoked during search indexing
 * and search results.
 */
function api_search_node_view($node, $view_mode, $langcode) {
  if ($node->type != 'api') {
    return;
  }

  // Load by documentation (node) ID. Try to load as a function if possible.
  $did = (int) $node->nid;
  if ($did <= 0) {
    return;
  }
  $doc = api_object_load($did, NULL, 'function');
  if (!$doc || !$doc->branch_id) {
    return;
  }

  // See if we should exclude this node.
  if (!api_search_check_compatibility($doc)) {
    return;
  }

  // Build the node to index.
  $title = api_search_make_node_title($doc);
  if (!$title) {
    return;
  }

  $node->title = $title;

  // Add extra fields of information.
  $fields = array('title', 'object_type', 'summary', 'documentation', 'modifiers', 'var', 'parameters', 'return_value', 'throws');
  foreach ($fields as $field) {
    if (isset($doc->$field) && trim($doc->$field)) {
      $text = $doc->$field;
      if ($field === 'object_type') {
        $text = '(' . $text . ')';
      }
      $node->content['api_' . $field] = array(
        '#markup' => '<div>' . $text . '</div>',
      );
    }
  }
}

/**
 * Implements hook_api_updated().
 *
 * Notifies the Solr module when a documentation "node" has been updated and
 * needs to be reparsed. Same for Core search/node module searching.
 */
function api_search_api_updated($dids) {
  $dosolr = module_exists('apachesolr');
  $docore = module_exists('search');
  foreach ($dids as $did) {
    if ($dosolr) {
      apachesolr_mark_entity('node', $did);
    }
    if ($docore) {
      search_touch_node($did);
    }
  }
}

/**
 * Implements hook_url_outbound_alter().
 *
 * Alters node/* URLs pointing to fake API docs nodes so that they instead
 * go to the API module's URL for the documentation item.
 */
function api_search_url_outbound_alter(&$path, &$options, $original_path) {
  $matches = array();
  $path = is_null($path) ? '' : $path;
  if (preg_match('|^node/(\d+)$|', $path, $matches)) {
    $nid = (int) $matches[1];
    if ($nid > 0) {
      $doc = api_object_load($nid);
      if ($doc) {
        $path = api_url($doc);
      }
    }
  }
}

/**
 * Implements hook_api_ignore_node_access().
 */
function api_search_api_ignore_node_access($query) {
  // Skip processing if this is a search query from the Core Search module or
  // Apache Solr search module. But only if the current user has
  // "access api reference" permissions.
  if (!user_access('access API reference')) {
    return FALSE;
  }

  // There isn't a great way to test for it being a core Search query,
  // unfortunately. There's supposed to be a tag but it's added too late due
  // to a core bug. So, see if the first table is {search_index}.
  $tables = $query->getTables();
  $first = reset($tables);
  if (is_array($first) && isset($first['table']) && $first['table'] == 'search_index') {
    return TRUE;
  }

  // For Apache Solr, the query should be a subclass of
  // BackdropSolrQueryInterface.
  if ($query instanceof BackdropSolrQueryInterface) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter() for apachesolr_index_config_form().
 *
 * Makes the API fake node type appear as an indexable bundle in the checkbox
 * list.
 */
function api_search_form_apachesolr_index_config_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['config']['entities']['node'])) {
    $options = $form['config']['entities']['node']['#options'];
    $options['api'] = t('API reference entries');
    asort($options);
    $form['config']['entities']['node']['#options'] = $options;
  }
}

/**
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE() (node).
 *
 * Node title is set in the Solr indexing document earlier than the call to
 * node_view(), so we have to fix it after the fact. Also, we add custom
 * fields for the object type, branch, and project.
 */
function api_search_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $env_id) {
  if ($entity->type != 'api') {
    return;
  }

  // The first time this is called during an indexing run, there will be
  // PHP notices in the apachesolr.index.inc function entity_bundle_label()
  // because the API "content type" is not a real bundle. So, get around this.
  // First, trigger generating the list of labels.
  $label = entity_bundle_label('node', 'api');
  // Then, fix it up so next time we don't get more PHP notices.
  $labels = &backdrop_static('entity_bundle_label', array());
  if (!empty($labels) && !isset($labels['node']['api'])) {
    $labels['node']['api'] = t('API documentation');
  }

  // Load the documentation object.
  $did = (int) $entity->nid;
  if ($did <= 0) {
    return;
  }
  $doc = api_object_load($did, NULL, 'function');
  if (!$doc || !$doc->branch_id) {
    return;
  }

  if (!api_search_check_compatibility($doc)) {
    return;
  }

  // Build the "node" title.
  $title = api_search_make_node_title($doc);
  if ($title) {
    $document->label = $title;
  }

  // Add field information (single-string dynamic fields) for Branch, Project,
  // and Object type.
  $branch = api_get_branch_by_id($doc->branch_id);
  if ($branch) {
    $document->addField('ss_apidoc_branch', $branch->title);
    $document->addField('ss_apidoc_project', $branch->project_title);
    $document->addField('ss_apidoc_compat', $branch->core_compatibility);
  }

  $document->addField('ss_apidoc_type', $doc->object_type);
}

/**
 * Implements hook_facetapi_facet_info().
 *
 * Tells Facet API about the Branch, Project, and Object Type fields.
 */
function api_search_facetapi_facet_info(array $searcher_info) {
  $fields = array(
    'ss_apidoc_branch' => array(t('Branch'), t('Branch the API documentation is in')),
    'ss_apidoc_project' => array(t('Project'), t('Project the API documentation is in')),
    'ss_apidoc_type' => array(t('Object type'), t('Function, class, etc.')),
    'ss_apidoc_compat' => array(t('Core compatibility'), t('Backdrop Core version compatibility')),
  );

  $facets = array();

  foreach ($fields as $field => $info) {
    $facets[$field] = array(
      'name' => $field,
      'label' => $info[0],
      'description' => $info[1],
      'query types' => array('term'),
    );
  }

  return $facets;
}

/**
 * Makes a "node" title for an API documentation item.
 *
 * @param $doc
 *   Loaded documentation object.
 *
 * @return string
 *   A title to use, or an empty string if one could not be generated.
 */
function api_search_make_node_title($doc) {
  // Load the branch.
  $branch = api_get_branch_by_id($doc->branch_id);
  if (!$branch || !$branch->branch_id) {
    return '';
  }

  return $doc->title;
}

/**
 * Form constructor for the API search administrative form.
 *
 * @see api_search_admin_form_submit()
 * @ingroup forms
 */
function api_search_admin_form($form, &$form_state) {

  $form['search_core_compatibilities'] = array(
    '#type' => 'textfield',
    '#default_value' => config_get('api.settings', 'search_core_compatibilities'),
    '#title' => t('Core compatibilities to make searchable'),
    '#description' => t('Separate by commas. A list of core compatibility values can be found in the <a href="!url">branches list</a>', array('!url' => url('admin/config/development/api/branches'))),
  );

  $form['info'] = array(
    '#markup' => t('Submitting this form will immediately cause incompatible information to be removed from search indexes. This can take some time.'),
  );

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
    '#submit' => array(
      'api_search_admin_form_submit',
      'api_search_update_compatibilities',
    ),
  );

  return $form;
}

/**
 * Submit handler for api_search_admin_form().
 */
function api_search_admin_form_submit($form, &$form_state) {
  $config = config('api.settings');
  $config->set('search_core_compatibilities', $form_state['values']['search_core_compatibilities']);
  $config->save();
}

/**
 * Removes outdated core compatibilities from the search index(es).
 */
function api_search_update_compatibilities() {
  $compatibilities = api_search_find_compatibilities();
  $ok_to_index = array_filter($compatibilities);
  if (count($ok_to_index)) {
    $cores = array_keys($ok_to_index);
    $query = db_select('api_documentation', 'ad');
    $query->innerJoin('api_branch', 'b', 'ad.branch_id = b.branch_id');
    $query->condition('b.core_compatibility', $cores, 'NOT IN');
    $query->fields('ad', array('did'));
    $to_remove = $query->execute()->fetchCol();
    if (count($to_remove)) {
      // Make a batch to remove these "node" IDS from the core and Solr
      // indexes.
      batch_set(array('operations' => array(array('api_search_remove_nodes', array($to_remove)))));
    }
  }
}

/**
 * Calculates the list of core compatibilities for search indexing.
 *
 * @return array
 *   Array whose keys are core compatibility values in existing branches,
 *   and whose values are TRUE/FALSE if this core compatibility should be
 *   included/excluded from searching.
 */
function api_search_find_compatibilities() {
  static $compatibilities = NULL;
  if (!isset($compatibilities)) {
    $compatibilities = array();
    $var = trim(config_get('api.settings', 'search_core_compatibilities'));
    $branches = api_get_branches();
    foreach ($branches as $branch) {
      $core = $branch->core_compatibility;
      if (!isset($compatibilities[$core])) {
        $compatibilities[$core] = (!$var || (strpos($var, $core) !== FALSE));
      }
    }
  }

  return $compatibilities;
}

/**
 * Implements hook_apachesolr_ENTITY_TYPE_exclude() for node entities.
 *
 * Returns TRUE to exclude API "nodes" if the core compatibility doesn't match
 * up.
 */
function api_search_apachesolr_node_exclude($entity_id, $row, $env_id) {
  if ($row->bundle == 'api') {
    $obj = api_object_load($entity_id);
    if (!api_search_check_compatibility($obj)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Checks whether an API object should be indexed.
 *
 * @return bool
 *   TRUE to index; FALSE to skip. Only returns FALSE if it can definitively
 *   decide.
 */
function api_search_check_compatibility($obj) {
  if (!$obj) {
    return TRUE;
  }

  $branch = api_get_branch_by_id($obj->branch_id);
  if (!$branch) {
    return TRUE;
  }

  $compatibilities = api_search_find_compatibilities();
  if ($compatibilities[$branch->core_compatibility]) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Removes API nodes from Solr and core Search indexes using Batch API.
 *
 * @param $dids
 *   IDs of the documentation items to remove.
 * @param $context
 *   Batch context.
 */
function api_search_remove_nodes($dids, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($dids);
    $context['sandbox']['dids'] = $dids;
    $context['sandbox']['dosolr'] = module_exists('apachesolr');
    $context['sandbox']['docore'] = module_exists('search');
  }

  // Get the next batch of 100 IDs.
  $this_batch = array_slice($context['sandbox']['dids'], $context['sandbox']['progress'], 100);
  $context['sandbox']['progress'] += count($this_batch);

  // Remove them from the indexes.
  foreach ($this_batch as $did) {
    if ($context['sandbox']['dosolr']) {
      $node = node_load($did);
      apachesolr_entity_delete($node, 'node');
    }
    if ($context['sandbox']['docore']) {
      search_reindex($did, 'node');
    }
  }

  $context['finished'] = min(1, $context['sandbox']['progress'] / $context['sandbox']['max']);
  if (!count($this_batch)) {
    // Just make sure we don't run an endless loop here.
    $context['finished'] = 1;
  }
}
