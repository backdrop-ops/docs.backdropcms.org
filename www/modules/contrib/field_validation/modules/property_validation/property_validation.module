<?php
/**
 * @file
 * Add validation rules to field instance.
 */

/**
 * Implements hook_autoload_info().
 */
function property_validation_autoload_info() {
  return array(
    // Add all the old ctools plugins.
    'property_validation_blacklist_validator' => 'includes/property_validation_blacklist_validator.inc',
    'property_validation_date_range2_validator' => 'includes/property_validation_date_range2_validator.inc',
    'property_validation_email_validator' => 'includes/property_validation_email_validator.inc',
    'property_validation_equal_values_validator' => 'includes/property_validation_equal_values_validator.inc',
    'property_validation_length_validator' => 'includes/property_validation_length_validator.inc',
    'property_validation_match_field_validator' => 'includes/property_validation_match_field_validator.inc',
    'property_validation_match_property_validator' => 'includes/property_validation_match_property_validator.inc',
    'property_validation_must_be_empty_validator' => 'includes/property_validation_must_be_empty_validator.inc',
    'property_validation_number_of_selections_validator' => 'includes/property_validation_number_of_selections_validator.inc',
    'property_validation_numeric2_validator' => 'includes/property_validation_numeric2_validator.inc',
    'property_validation_oneofseveral_validator' => 'includes/property_validation_oneofseveral_validator.inc',
    'property_validation_pattern_validator' => 'includes/property_validation_pattern_validator.inc',
    'property_validation_php_validator' => 'includes/property_validation_php_validator.inc',
    'property_validation_plain_text_validator' => 'includes/property_validation_plain_text_validator.inc',
    'property_validation_regex_validator' => 'includes/property_validation_regex_validator.inc',
    'property_validation_specific_value_validator' => 'includes/property_validation_specific_value_validator.inc',
    'property_validation_unique_validator' => 'includes/property_validation_unique_validator.inc',
    'property_validation_unique_values_validator' => 'includes/property_validation_unique_values_validator.inc',
    'property_validation_url_validator' => 'includes/property_validation_url_validator.inc',
    'property_validation_words_validator' => 'includes/property_validation_words_validator.inc',
  );
}

/**
 * Implements hook_field_attach_validate().
 */
function property_validation_field_attach_validate($entity_type, $entity, &$errors) {
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  // Using ctools to get validation rules of this bundle.
  ctools_include('export');
  $rules = ctools_export_load_object('property_validation_rule', 'conditions', array('entity_type' => $entity_type, 'bundle' => $bundle));
  if ($rules) {
    foreach ($rules as $rule) {
      // Disabled by Ctools.
      if (!empty($rule->disabled)) {
        continue;
      }
      ctools_include('plugins');
      $plugin = ctools_get_plugins('property_validation', 'validator', $rule->validator);
      $class = ctools_plugin_get_class($plugin, 'handler');
      if (empty($class)) {
        continue;
      }
      if (!is_subclass_of($rule->validator, 'property_validation_validator')) {
        drupal_set_message(t("Plugin '@validator' should extends 'property_validation_validator'.", array('@validator' => $rule->validator)));
        continue;
      }
      $property_name = $rule->property_name;
      $value = isset($entity->{$property_name}) ? $entity->{$property_name} : '';
      $validator = new $class($entity_type, $entity, $value, $rule, $errors);
      $validator->validate();
    }
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function property_validation_ctools_plugin_type() {
  return array(
    'validator' => array(
      'use hooks' => FALSE,
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function property_validation_ctools_plugin_directory($module, $plugin) {
  if ($module == 'property_validation' && $plugin == 'validator') {
    return 'plugins/' . $plugin;
  }
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell Ctools that we support the default_field_validation_rules API.
 */
function property_validation_ctools_plugin_api($owner, $api) {
  if ($owner == 'property_validation' && $api == 'default_property_validation_rules') {
    return array('version' => 2);
  }
}

/**
 * Implements hook_field_validation_validator_info().
 */
function property_validation_field_validation_validator_info() {
  $info = array(
    'property_validation_blacklist_validator' => array(
      'label' => t('Words blacklist'),
      'description' => t("Validates that user-entered data doesn't contain any of the specified illegal words."),
      'class' => 'property_validation_blacklist_validator',
    ),
    'property_validation_date_range_validator' => array(
      'label' => t('Date range'),
      'description' => t("Validates user-entered data against a specified date range."),
      'class' => 'property_validation_date_range_validator',
    ),
    'property_validation_email_validator' => array(
      'label' => t('Email'),
      'description' => t("Verifies that user-entered data is a valid email address."),
      'class' => 'property_validation_email_validator',
    ),
    'property_validation_length_validator' => array(
      'label' => t('Length'),
      'description' => t('Verifies the length of user-entered values, with the option to specify minimum and maximum length.'),
      'class' => 'property_validation_length_validator',
    ),
    'property_validation_match_field_validator' => array(
      'label' => t('Match against a field'),
      'description' => t("Validate that user-entered data matches against a field, for example must match user's realname."),
      'class' => 'property_validation_match_field_validator',
    ),
    'property_validation_match_property_validator' => array(
      'label' => t('Match against a property'),
      'description' => t("Validate that user-entered data matches against a property, for example must match user's name."),
      'class' => 'property_validation_match_property_validator',
    ),
    'property_validation_must_be_empty_validator' => array(
      'label' => t('Must be empty'),
      'description' => t("Verifies that a specified textfield remains empty - Recommended use case: used as an anti-spam measure by hiding the element with CSS."),
      'class' => 'property_validation_must_be_empty_validator',
    ),
    'property_validation_numeric_validator' => array(
      'label' => t('Numeric values'),
      'description' => t('Verifies that user-entered values are numeric, with the option to specify min and / or max values.'),
      'class' => 'property_validation_numeric_validator',
    ),
    'property_validation_pattern_validator' => array(
      'label' => t('Pattern(regex lite)'),
      'description' => t('Verifies that a user-entered value conforms to a specified pattern.'),
      'class' => 'property_validation_pattern_validator',
    ),
    'property_validation_php_validator' => array(
      'label' => t('PHP code'),
      'description' => t("Be careful, it is powerful and also dangerous."),
      'class' => 'property_validation_php_validator',
    ),
    'property_validation_plain_text_validator' => array(
      'label' => t('Plain text (disallow tags)'),
      'description' => t("Verifies that user-entered data doesn't contain HTML tags."),
      'class' => 'property_validation_plain_text_validator',
    ),
    'property_validation_regex_validator' => array(
      'label' => t('Regular expression'),
      'description' => t('Validates user-entered text against a specified regular expression.'),
      'class' => 'property_validation_regex_validator',
    ),
    'property_validation_specific_value_validator' => array(
      'label' => t('Specific value(s)'),
      'description' => t("Verifies that the specified property contains a defined value."),
      'class' => 'property_validation_specific_value_validator',
    ),
    'property_validation_unique_validator' => array(
      'label' => t('Unique values'),
      'description' => t('Verifies that all values are unique in current entity or bundle.'),
      'class' => 'property_validation_unique_validator',
    ),
    'property_validation_url_validator' => array(
      'label' => t('URL'),
      'description' => t("Verifies that user-entered data is a valid url."),
      'class' => 'property_validation_url_validator',
    ),
    'property_validation_words_validator' => array(
      'label' => t('Number of words'),
      'description' => t('Verifies the number of words of user-entered values, with the option to specify minimum and maximum number of words.'),
      'class' => 'property_validation_words_validator',
    ),
  );

  return $info;
}
