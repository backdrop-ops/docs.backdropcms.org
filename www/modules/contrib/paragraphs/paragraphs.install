<?php

/**
 * @file
 * Install, update and uninstall functions for the paragraphs module.
 */

/**
 * Implements hook_schema().
 */
function paragraphs_schema() {
  $schema = array();

  $schema['paragraphs_item'] = array(
    'description' => 'Stores information about paragraph items.',
    'fields' => array(
      'item_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique paragraph item ID.',
      ),
      'revision_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Default revision ID.',
      ),
      'bundle' => array(
        'description' => 'The Paragraph type of this item.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'field_name' => array(
        'description' => 'Field name of the host entity.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'archived' => array(
        'description' => 'Boolean indicating whether the Paragraphs item is archived.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the Paragraphs item is published.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('item_id'),
  );

  $schema['paragraphs_item_revision'] = array(
    'description' => 'Stores revision information about Paragraph items.',
    'fields' => array(
      'revision_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique revision ID.',
      ),
      'item_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Paragraph item ID.',
      ),
    ),
    'primary key' => array('revision_id'),
    'indexes' => array(
      'item_id' => array('item_id'),
    ),
    'foreign keys' => array(
      'versioned_paragraphs_item' => array(
        'table' => 'paragraphs_item',
        'columns' => array('item_id' => 'item_id'),
      ),
    ),
  );

  // Entity Cache is now in core, include the entity cache schema by default.
  $cache_schema = backdrop_get_schema_unprocessed('system', 'cache');
  $cache_schema['description'] = 'Cache table used to store paragraphs_item entity records.';
  $schema['cache_entity_paragraphs_item'] = $cache_schema;

  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function paragraphs_field_schema($field) {
  $columns = array();
  if ($field['type'] == 'paragraphs') {
    $columns = array(
      'value' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'The Paragraph item id.',
      ),
      'revision_id' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'The Paragraph item revision id.',
      ),
    );
  }
  return array(
    'columns' => $columns,
  );
}

/**
 * Implements hook_requirements().
 */
function paragraphs_requirements($phase) {
  $t = get_t();
  $requirements = array();

  // Make sure schema version is appropriate.
  if (backdrop_get_installed_schema_version('paragraphs') == 7102) {
    backdrop_set_installed_schema_version('paragraphs', 999);
  }

  if ($phase == 'runtime') {
    if (!module_exists('entity_plus')) {
      $requirements['paragraphs'] = array(
        'title' => $t('Paragraphs'),
        'value' => $t('Required module is not installed'),
        'description' => $t('Paragraphs requires the Entity Plus module to be installed.'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function paragraphs_uninstall() {
  if (db_table_exists('cache_entity_paragraphs_item')) {
    db_drop_table('cache_entity_paragraphs_item');
  }
}

/**
 * Implements hook_update_last_removed().
 */
function paragraphs_update_last_removed() {
  return 7101;
}

/**
 * Update {paragraphs_bundle} schema to include label and description fields.
 */
function paragraphs_update_1000() {
  if (!db_table_exists('paragraphs_bundle')) {
    return;
  }

  $fields = array(
    'label' => array(
      'description' => 'A user-facing label for this Paragraph type.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    ),
    'description' => array(
      'description' => 'A brief description of this Paragraph type.',
      'type' => 'text',
      'not null' => FALSE,
      'size' => 'medium',
      'default' => NULL,
    ),
  );

  foreach ($fields as $key => $field) {
    if (!db_field_exists('paragraphs_bundle', $key)) {
      db_add_field('paragraphs_bundle', $key, $field);
    }
  }

  // Set initial label value equal to name.
  db_update('paragraphs_bundle')
    ->expression('label', 'name')
    ->execute();
}

/**
 * Updates paragraphs bundle to CMI.
 */
function paragraphs_update_1001() {
  if (!db_table_exists('paragraphs_bundle')) {
    return;
  }

  $bundles = array();
  $query = db_select('paragraphs_bundle', 'pb')
        ->fields('pb')
        ->orderBy('pb.bundle', 'ASC');
  foreach ($query->execute() as $bundle_object) {
    $bundles[$bundle_object->bundle] = $bundle_object;
  }
  foreach ($bundles as $bundle) {
    paragraphs_bundle_save($bundle);
  }
  db_drop_table('paragraphs_bundle');
}

/**
 * Ensure entity cache table is created for Paragraphs items.
 */
function paragraphs_update_1002() {
  module_load_include('module', 'paragraphs');
  paragraphs_ensure_entitycache_table();
}

/**
 * Add status field for paragraphs bundle and item.
 */
function paragraphs_update_1003() {
  $status = array(
    'description' => 'Boolean indicating whether the paragraph item is published.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 1,
  );

  db_add_field('paragraphs_item', 'status', $status);
}

/**
 * Drop paragraphs_bundle table.
 */
function paragraphs_update_1004() {
  if (!db_table_exists('paragraphs_bundle')) {
    return;
  }
  // New installs were creating the table from the schema, but the config is all
  // in CMI now. The schema is now removed but need to ensure the table is
  // dropped.
  db_drop_table('paragraphs_bundle');
}
